{# Template programming within this file falls under the project licence.
   Original text of the source file taken from ChibiOS and remains under the
   licence shown below. #}
/*
    ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/*
    Generated by gen-board.h.py based on {{yamlfile}}
*/

#ifndef _BOARD_H_
#define _BOARD_H_


/*
    Setup for {{name}}
*/

/*
    Board identifier
*/
#define BOARD_
#define BOARD_NAME                     "{{name}}"

/*
    Board oscillators-related settings.
*/
#if !defined(STM32_LSECLK)
#define STM32_LSECLK                   {{lsefreq}}U
#endif

#if !defined(STM32_HSECLK)
#define STM32_HSECLK                   {{hsefreq}}U
#endif

/*
    Board voltages
    Required for performance limits calculation.
*/
#define STM32_VDD                      {{voltage}}U

/*
    MCU type as defined in the ST header.
*/
#define {{mcutype}}

/*
    IO pins assignments.
*/
{% for port in pins.iter_ports() %}
  {% for pin in pins.iter_port(port) %}
{{"#define GPIO{}_{:<24} {}U".format(pin.port, pin.name, pin.num)}}
  {% endfor %}

{% endfor %}
/*
    IO lines assignments.
*/
{% for pin in pins.iter_names() %}
{{"#define LINE_{:<25} PAL_LINE(GPIO{}, {}U)".format(pin.name, pin.port, pin.num)}}
{% endfor %}

/*
    I/O ports initial setup, this configuration is established soon after reset
    in the initialization code.
     Please refer to the STM32 Reference Manual for details.
*/
#define PIN_MODE_INPUT(n)              (0U << ((n) * 2U))
#define PIN_MODE_OUTPUT(n)             (1U << ((n) * 2U))
#define PIN_MODE_ALTERNATE(n)          (2U << ((n) * 2U))
#define PIN_MODE_ANALOG(n)             (3U << ((n) * 2U))
#define PIN_OD_LOW(n)                  (0U << (n))
#define PIN_OD_HIGH(n)                 (1U << (n))
#define PIN_OTYPE_PUSHPULL(n)          (0U << (n))
#define PIN_OTYPE_OPENDRAIN(n)         (1U << (n))
#define PIN_OSPEED_VERYLOW(n)          (0U << ((n) * 2U))
#define PIN_OSPEED_LOW(n)              (1U << ((n) * 2U))
#define PIN_OSPEED_MEDIUM(n)           (2U << ((n) * 2U))
#define PIN_OSPEED_HIGH(n)             (3U << ((n) * 2U))
#define PIN_PUPD_FLOATING(n)           (0U << ((n) * 2U))
#define PIN_PUPD_PULLUP(n)             (1U << ((n) * 2U))
#define PIN_PUPD_PULLDOWN(n)           (2U << ((n) * 2U))
#define PIN_AFIO_AF(n, v)              ((v) << (((n) % 8U) * 4U))

{% for port in pins.iter_ports() %}
/*
 *  GPIO{{port}} setup:
 *
  {% for pin in pins.iter_port(port) %}
{{" * P{}{:<5}- {}({}).".format(pin.port, pin.num, pin.name, pin.raw)}}
  {% endfor %}
*/
  {% for mode in pins.modes %}
#define VAL_GPIO{{port}}_{{mode}}R (\
    {% for pin in pins.iter_port(port) %}
    PIN_{{mode}}_{{pin[mode|lower]}}(GPIO{{port}}_{{pin.name}}) | \
    {% endfor %}
  )

  {% endfor %}
#define VAL_GPIO{{port}}_AFRL ( \
  {% for pin in pins.iter_port(port) if pin.num < 8 %}
    PIN_AFIO_AF(GPIO{{port}}_{{pin.name}}, {{pin.af}}U) | \
  {% endfor %}
  )

#define VAL_GPIO{{port}}_AFRH ( \
  {% for pin in pins.iter_port(port) if pin.num >= 8 %}
    PIN_AFIO_AF(GPIO{{port}}_{{pin.name}}, {{pin.af}}U) | \
  {% endfor %}
  )

{% endfor %}
#if !defined(_FROM_ASM_)
#ifdef __cplusplus
extern "C" {
#endif
  void boardInit(void);
#ifdef __cplusplus
}
#endif
#endif /* _FROM_ASM_ */

#endif /* _BOARD_H_ */
